name: Build, Push & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_push:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Short SHA
        id: vars
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (amd64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./src/assistant/utils/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            sithuyehtun/full_duplex_assistant:latest
            sithuyehtun/full_duplex_assistant:${{ steps.vars.outputs.sha_short }}

  deploy:
    needs: build_push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script_stop: true
          script: |
            set -euo pipefail
          
            REPO_PATH="${{ secrets.SERVER_PATH }}"
          
            echo ">>> Prepare directory & repo"
            mkdir -p "${REPO_PATH}"
            if [ ! -d "${REPO_PATH}/.git" ]; then
              git clone https://github.com/${{ github.repository }} "${REPO_PATH}"
            fi
          
            cd "${REPO_PATH}"
            git fetch --all --prune
            git reset --hard origin/main
          
            echo ">>> Write app env"
            mkdir -p src/assistant
            # no heredocs; write with printf (shell-safe)
            printf '%s\n' \
              "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
              "ALLOWED_ORIGINS=https://com-cloud.cloud" \
              "ENABLE_VOICE=0" \
              > src/assistant/.env
          
            echo ">>> Write root .env"
            printf '%s\n' \
              "LE_EMAIL=${{ secrets.LE_EMAIL }}" \
              "IMAGE_TAG=${{ needs.build_push.outputs.tag }}" \
              > .env
          
            echo ">>> Ensure ACME storage (bind mount ./letsencrypt) with strict perms"
            mkdir -p ./letsencrypt
            touch ./letsencrypt/acme.json
            chmod 600 ./letsencrypt/acme.json || true
            ls -l ./letsencrypt || true
          
            if [ ! -f ./web/index.html ]; then
              echo "⚠️  WARNING: web/index.html missing. Check compose volume path."
              ls -la web || true
            fi
          
            echo ">>> Stop this compose project only"
            docker compose down --remove-orphans || true
          
            echo ">>> Prune only unused images/cache"
            docker image prune -af || true
            docker builder prune -af || true
          
            echo ">>> Pull and start"
            docker compose pull
            docker compose up -d --remove-orphans
          
            echo ">>> Local HTTPS check (Host header)"
            for i in {1..30}; do
              if curl -fsSIk https://127.0.0.1 -H "Host: com-cloud.cloud" >/dev/null 2>&1; then
                echo "Local HTTPS check passed"
                break
              fi
              sleep 2
              if [ $i -eq 30 ]; then
                echo "❌ Local HTTPS check failed"; exit 1
              fi
            done
          
            echo ">>> Public HTTPS smoke test"
            for i in {1..30}; do
              if curl -fsSIk https://com-cloud.cloud/ >/dev/null 2>&1; then
                echo "Public HTTPS check passed"
                break
              fi
              sleep 5
              if [ $i -eq 30 ]; then
                echo "❌ Public HTTPS check failed"; exit 1
              fi
            done
          
            echo "✅ Deployed image tag: ${{ needs.build_push.outputs.tag }}"

